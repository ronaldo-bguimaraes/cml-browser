(()=>{"use strict";const e={get STRING(){return new RegExp("(\"(?:.*?)\"|'(?:.*?)')")},get DOCTYPE(){return new RegExp("(!doctype)","i")},get WORD(){return new RegExp("(\\b(?:[\\w-]+)\\b)")},get MODULE(){return new RegExp(`(@${this.WORD.source})`)},get KEYWORD(){return new RegExp(`(\\$${this.WORD.source})`)},get TAG(){return new RegExp(`(${this.DOCTYPE.source}|${this.WORD.source}|${this.MODULE.source})`,"i")},get OPEN_BRACKET(){return new RegExp("(\\[)")},get CLOSE_BRACKET(){return new RegExp("(\\])")},get BRACKETS(){return new RegExp(`(${this.OPEN_BRACKET.source}|${this.CLOSE_BRACKET.source})`)},get OPEN_BRACE(){return new RegExp("({)")},get CLOSE_BRACE(){return new RegExp("(})")},get BRACES(){return new RegExp(`(${this.OPEN_BRACE.source}|${this.CLOSE_BRACE.source})`)},get EQUAL(){return new RegExp("(=)")},get NEW_LINE(){return new RegExp("(\\n)")},get MATCH(){return new RegExp(`(${this.STRING.source}|${this.TAG.source}|${this.KEYWORD.source}|${this.BRACKETS.source}|${this.BRACES.source}|${this.EQUAL.source}|${this.NEW_LINE.source})`,"gi")}},t={get STRING(){return new RegExp(`^${e.STRING.source}$`)},get DOCTYPE(){return new RegExp(`^${e.DOCTYPE.source}$`,"i")},get WORD(){return new RegExp(`^${e.WORD.source}$`)},get MODULE(){return new RegExp(`^${e.MODULE.source}$`)},get KEYWORD(){return new RegExp(`^${e.KEYWORD.source}$`)},get TAG(){return new RegExp(`^${e.TAG.source}$`,"i")},get OPEN_BRACKET(){return new RegExp(`^${e.OPEN_BRACKET.source}$`)},get CLOSE_BRACKET(){return new RegExp(`^${e.CLOSE_BRACKET.source}$`)},get BRACKETS(){return new RegExp(`^${e.BRACKETS.source}$`)},get OPEN_BRACE(){return new RegExp(`^${e.OPEN_BRACE.source}$`)},get CLOSE_BRACE(){return new RegExp(`^${e.CLOSE_BRACE.source}$`)},get BRACES(){return new RegExp(`^${e.BRACES.source}$`)},get EQUAL(){return new RegExp(`^${e.EQUAL.source}$`)},get NEW_LINE(){return new RegExp(`^${e.NEW_LINE.source}$`)},get MATCH(){return new RegExp(`^${e.MATCH.source}$`,"gi")}};var n;!function(e){e[e.DOCTYPE=0]="DOCTYPE",e[e.CHILDREN=1]="CHILDREN",e[e.ATTRIBUTE=2]="ATTRIBUTE",e[e.EQUAL=3]="EQUAL",e[e.VALUE=4]="VALUE",e[e.OPEN_BRACE=5]="OPEN_BRACE"}(n||(n={}));class r{name;attributes=new Map;children=[];parent;constructor(e){this.name=e}appendChild(e){return this.children.push(e),e instanceof r&&(e.parent=this),e}get root(){return void 0!==this.parent?this.parent.root:this}}const E=new Map;function s(e,t){for(const n of e.children)if("$children"===n){const r=e.children.indexOf(n);e.children.splice(r,1,...t)}}function o(e,n){for(const i of e.children)if(i instanceof r)if(/^(declare)$/.test(i.name))o(i,!0),e.children=e.children.filter((e=>e!==i));else if(t.MODULE.test(i.name))if(void 0===n||!0===n)E.set(i.name,i);else{const t=E.get(i.name);if(void 0===t)throw new Error(`Module ${i.name} not found!`);{const n=t.children[0];if(n instanceof r){const t=new r(n.name);for(const e of n.attributes)t.attributes.set(e[0],e[1]);for(const e of i.attributes)t.attributes.set(e[0],e[1]);for(const e of n.children)t.children.push(e);t.parent=i.parent,s(t,i.children);const E=e.children.indexOf(i);e.children.splice(E,1,t)}}}else o(i,!1);return e}const i=new RegExp("^(!doctype|area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$","i");function c(e){const t=[],n=[];for(const n of e.children)t.push(n instanceof r?c(n):n);for(const t of e.attributes)n.push(` ${t[0]}${t[1]?`=${t[1]}`:""}`);return void 0!==e.parent?`<${e.name}${n.join("")}>${i.test(e.name)?"":`${t.join("")}</${e.name}>`}`:`${t.join("")}`}function u(E){return c(o(function(e){let E,s=n.DOCTYPE,o=new r("document"),i=!1;function c(e){const t=new r(e);o=o.appendChild(t),s=n.ATTRIBUTE}function u(){void 0!==o.parent&&(o=o.parent)}for(const r of e)s===n.DOCTYPE?t.TAG.test(r)&&c(r):s===n.CHILDREN?t.STRING.test(r)?o.appendChild(r.slice(1,-1)):t.KEYWORD.test(r)?o.appendChild(r):t.TAG.test(r)?c(r):t.CLOSE_BRACE.test(r)&&u():s===n.OPEN_BRACE?t.OPEN_BRACE.test(r)?s=n.CHILDREN:(u(),t.KEYWORD.test(r)?o.appendChild(r):t.STRING.test(r)?o.appendChild(r.slice(1,-1)):t.TAG.test(r)&&c(r)):s===n.ATTRIBUTE?t.WORD.test(r)?(E=r,o.attributes.set(E,void 0),s=n.EQUAL):t.NEW_LINE.test(r)&&!1===i?s=n.OPEN_BRACE:t.OPEN_BRACE.test(r)?s=n.CHILDREN:t.OPEN_BRACKET.test(r)?i=!0:t.CLOSE_BRACKET.test(r)&&(i=!1):s===n.EQUAL?t.EQUAL.test(r)?s=n.VALUE:t.WORD.test(r)?(E=r,o.attributes.set(E,void 0),s=n.EQUAL):t.NEW_LINE.test(r)&&(s=n.OPEN_BRACE):s===n.VALUE&&(t.STRING.test(r)?(void 0!==E&&o.attributes.set(E,r),s=n.ATTRIBUTE):t.NEW_LINE.test(r)&&(u(),s=n.CHILDREN));return o.root}(function(t){const n=[],r=t.matchAll(e.MATCH);for(const e of r)n.push(e[0]);return n}(E))))}const R=new DOMParser,p=function(e){const t=u('\n\n!DOCTYPE html\nhtml lang="pt-br" {\n  head {\n    meta charset="utf-8"\n    meta name=\'viewport\' content="width=device-width, initial-scale=1"\n    link ref="icon" href="#"\n    title {"CML"}\n  }\n  body\n  {\n    declare {\n      @container {\n        div {\n          $children\n        }\n      }\n    }\n    input id="nome"\n  }\n}\n\n');return R.parseFromString(t,"text/html")}();document.head?.replaceWith(p.head),document.body?.replaceWith(p.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,